
import Chisel._

object Instructions {
  val Default = List(InstType.N, "b0000".U, "b0000".U)
  def DecodeMap = IInst.map ++ CSRInst.map ++ LSInst.map ++ BRInst.map
  // todo
}

object IInst {
  def lui     = BitPat("b?????????????????????????0110111")
  def auipc   = BitPat("b?????????????????????????0010111")

  def addi    = BitPat("b?????????????????000?????0010011")
  def addiw   = BitPat("b?????????????????000?????0011011")
  def slti    = BitPat("b?????????????????010?????0010011")
  def sltiu   = BitPat("b?????????????????011?????0010011")
  def xori    = BitPat("b?????????????????100?????0010011")
  def ori     = BitPat("b?????????????????110?????0010011")
  def andi    = BitPat("b?????????????????111?????0010011")
  def slli    = BitPat("b0000000??????????001?????0010011")
  def slliw   = BitPat("b0000000??????????001?????0011011")
  def srli    = BitPat("b0000000??????????101?????0010011")
  def srliw   = BitPat("b0000000??????????101?????0011011")
  def srai    = BitPat("b0100000??????????101?????0010011")
  def sraiw   = BitPat("b0100000??????????101?????0011011")

  def add     = BitPat("b0000000??????????000?????0110011")
  def addw    = BitPat("b0000000??????????000?????0111011")
  def sub     = BitPat("b0100000??????????000?????0110011")
  def subw    = BitPat("b0100000??????????000?????0111011")
  def sll     = BitPat("b0000000??????????001?????0110011")
  def sllw    = BitPat("b0000000??????????001?????0111011")
  def slt     = BitPat("b0000000??????????010?????0110011")
  def sltu    = BitPat("b0000000??????????011?????0110011")
  def xor     = BitPat("b0000000??????????100?????0110011")
  def srl     = BitPat("b0000000??????????101?????0110011")
  def srlw    = BitPat("b0000000??????????101?????0111011")
  def sra     = BitPat("b0100000??????????101?????0110011")
  def sraw    = BitPat("b0100000??????????101?????0111011")
  def or      = BitPat("b0000000??????????110?????0110011")
  def and     = BitPat("b0000000??????????111?????0110011")

  def map = Array(
    lui   -> List(InstType.U, ExecType.alu, ALUType.add ),
    auipc -> List(InstType.U, ExecType.alu, ALUType.add ),

    addi  -> List(InstType.I, ExecType.alu, ALUType.add ),
    addiw -> List(InstType.I, ExecType.alu, ALUType.addw),
    slti  -> List(InstType.I, ExecType.alu, ALUType.slt ),
    sltiu -> List(InstType.I, ExecType.alu, ALUType.sltu),
    xori  -> List(InstType.I, ExecType.alu, ALUType.xor ),
    ori   -> List(InstType.I, ExecType.alu, ALUType.or  ),
    andi  -> List(InstType.I, ExecType.alu, ALUType.and ),
    slli  -> List(InstType.I, ExecType.alu, ALUType.sll ),
    slliw -> List(InstType.I, ExecType.alu, ALUType.sllw),
    srli  -> List(InstType.I, ExecType.alu, ALUType.srl ),
    srliw -> List(InstType.I, ExecType.alu, ALUType.srlw),
    srai  -> List(InstType.I, ExecType.alu, ALUType.sra ),
    sraiw -> List(InstType.I, ExecType.alu, ALUType.sraw),

    add   -> List(InstType.R, ExecType.alu, ALUType.add ),
    addw  -> List(InstType.R, ExecType.alu, ALUType.addw),
    sub   -> List(InstType.R, ExecType.alu, ALUType.sub ),
    subw  -> List(InstType.R, ExecType.alu, ALUType.subw),
    sll   -> List(InstType.R, ExecType.alu, ALUType.sll ),
    sllw  -> List(InstType.R, ExecType.alu, ALUType.sllw),
    slt   -> List(InstType.R, ExecType.alu, ALUType.slt ),
    sltu  -> List(InstType.R, ExecType.alu, ALUType.sltu),
    xor   -> List(InstType.R, ExecType.alu, ALUType.xor ),
    or    -> List(InstType.R, ExecType.alu, ALUType.or  ),
    and   -> List(InstType.R, ExecType.alu, ALUType.and ),
    srl   -> List(InstType.R, ExecType.alu, ALUType.srl ),
    srlw  -> List(InstType.R, ExecType.alu, ALUType.srlw),
    sra   -> List(InstType.R, ExecType.alu, ALUType.sra ),
    sraw  -> List(InstType.R, ExecType.alu, ALUType.sraw),
  )
}

object CSRInst {
  def csrrw   = BitPat("b?????????????????001?????1110011")
  def csrrs   = BitPat("b?????????????????010?????1110011")
  def csrrc   = BitPat("b?????????????????011?????1110011")
  def csrrwi  = BitPat("b?????????????????101?????1110011")
  def csrrsi  = BitPat("b?????????????????110?????1110011")
  def csrrci  = BitPat("b?????????????????111?????1110011")

  def map = Array(
    csrrw   -> List(InstType.I, ExecType.csr),
    csrrs   -> List(InstType.I, ExecType.csr),
    csrrc   -> List(InstType.I, ExecType.csr),
    csrrwi  -> List(InstType.I, ExecType.csr),
    csrrsi  -> List(InstType.I, ExecType.csr),
    csrrci  -> List(InstType.I, ExecType.csr),
  )
}

object LSInst {
  def lb      = BitPat("b?????????????????000?????0000011")
  def lh      = BitPat("b?????????????????001?????0000011")
  def lw      = BitPat("b?????????????????010?????0000011")
  def ld      = BitPat("b?????????????????011?????0000011")
  def lbu     = BitPat("b?????????????????100?????0000011")
  def lhu     = BitPat("b?????????????????101?????0000011")
  def lwu     = BitPat("b?????????????????110?????0000011")
  def sb      = BitPat("b?????????????????000?????0100011")
  def sh      = BitPat("b?????????????????001?????0100011")
  def sw      = BitPat("b?????????????????010?????0100011")
  def sd      = BitPat("b?????????????????011?????0100011")

  def map = Array(
    lb  -> List(InstType.I, ExecType.lsu),
    lh  -> List(InstType.I, ExecType.lsu),
    lw  -> List(InstType.I, ExecType.lsu),
    ld  -> List(InstType.I, ExecType.lsu),
    lbu -> List(InstType.I, ExecType.lsu),
    lhu -> List(InstType.I, ExecType.lsu),
    lwu -> List(InstType.I, ExecType.lsu),
    sb  -> List(InstType.S, ExecType.lsu),
    sh  -> List(InstType.S, ExecType.lsu),
    sw  -> List(InstType.S, ExecType.lsu),
    sd  -> List(InstType.S, ExecType.lsu),
  )
}

object BRInst {
  def jal     = BitPat("b?????????????????????????1101111")
  def jalr    = BitPat("b?????????????????000?????1100111")
  def beq     = BitPat("b?????????????????000?????1100011")
  def bne     = BitPat("b?????????????????001?????1100011")
  def blt     = BitPat("b?????????????????100?????1100011")
  def bge     = BitPat("b?????????????????101?????1100011")
  def bltu    = BitPat("b?????????????????110?????1100011")
  def bgeu    = BitPat("b?????????????????111?????1100011")

  def map = Array(
    jal   -> List(InstType.I, ExecType.bru, BRUType.jal ),
    jalr  -> List(InstType.J, ExecType.bru, BRUType.jalr),
    beq   -> List(InstType.B, ExecType.bru, BRUType.beq ),
    bne   -> List(InstType.B, ExecType.bru, BRUType.bne ),
    blt   -> List(InstType.B, ExecType.bru, BRUType.blt ),
    bge   -> List(InstType.B, ExecType.bru, BRUType.bge ),
    bltu  -> List(InstType.B, ExecType.bru, BRUType.bltu),
    bgeu  -> List(InstType.B, ExecType.bru, BRUType.bgeu),
  )
}

object FenceInst {
  def fencei  = BitPat("b00000000000000000001000000001111")
}

object Priviledged {
  def ecall   = BitPat("b00000000000000000000000001110011")
  def ebreak  = BitPat("b00000000000100000000000001110011")
  def fence   = BitPat("b0000????????00000000000000001111")

}


/*
object VInst {
  def vl = BitPat("b?????????????????????????0000111")
  def vs = BitPat("b?????????????????????????0100111")

  def OPIVV = "b???????????000?????1010111"
  def OPFVV = "b???????????001?????1010111"
  def OPMVV = "b???????????010?????1010111"
  def OPIVI = "b???????????011?????1010111"
  def OPIVX = "b???????????100?????1010111"
  def OPFVF = "b???????????101?????1010111"
  def OPMVX = "b???????????110?????1010111"

  def vsetvli   = BitPat("b0????????????????111?????1010111")
  def vsetivli  = BitPat("b11???????????????111?????1010111")
  def vsetvl    = BitPat("b1000000??????????111?????1010111")

  // todo
}
*/